// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getHomeFeed = `-- name: GetHomeFeed :many
SELECT b.id, b.author, b.content, b.created_at FROM blogs b JOIN follow f ON b.author = f.followee 
WHERE f.follower = $1 AND b.created_at < $2 ORDER BY created_at LIMIT $3
`

type GetHomeFeedParams struct {
	Follower  pgtype.UUID
	CreatedAt pgtype.Timestamp
	Limit     int32
}

func (q *Queries) GetHomeFeed(ctx context.Context, arg GetHomeFeedParams) ([]Blog, error) {
	rows, err := q.db.Query(ctx, getHomeFeed, arg.Follower, arg.CreatedAt, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Blog
	for rows.Next() {
		var i Blog
		if err := rows.Scan(
			&i.ID,
			&i.Author,
			&i.Content,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
