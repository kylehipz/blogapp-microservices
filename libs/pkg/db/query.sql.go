// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one

INSERT INTO users (username, email, password) VALUES ($1, $2, $3) RETURNING id, username, email, password, created_at
`

type CreateUserParams struct {
	Username string
	Email    string
	Password string
}

// Users
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Username, arg.Email, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const findUser = `-- name: FindUser :one
SELECT id, username, email, password, created_at FROM users WHERE id = $1 LIMIT 1
`

func (q *Queries) FindUser(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, findUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const findUserByEmail = `-- name: FindUserByEmail :one
SELECT id, username, email, password, created_at FROM users WHERE email = $1 LIMIT 1
`

func (q *Queries) FindUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, findUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const findUserByUsername = `-- name: FindUserByUsername :one
SELECT id, username, email, password, created_at FROM users WHERE username = $1 LIMIT 1
`

func (q *Queries) FindUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, findUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const followUser = `-- name: FollowUser :one
INSERT INTO follow (follower, followee) VALUES ($1, $2) RETURNING follower, followee
`

type FollowUserParams struct {
	Follower pgtype.UUID
	Followee pgtype.UUID
}

// Follow
func (q *Queries) FollowUser(ctx context.Context, arg FollowUserParams) (Follow, error) {
	row := q.db.QueryRow(ctx, followUser, arg.Follower, arg.Followee)
	var i Follow
	err := row.Scan(&i.Follower, &i.Followee)
	return i, err
}

const getHomeFeed = `-- name: GetHomeFeed :many

SELECT b.id, b.author, b.content, b.created_at FROM blogs b JOIN follow f ON b.author = f.followee 
WHERE f.follower = $1 AND b.created_at < $2 ORDER BY created_at LIMIT $3
`

type GetHomeFeedParams struct {
	Follower  pgtype.UUID
	CreatedAt pgtype.Timestamp
	Limit     int32
}

// Home feed
func (q *Queries) GetHomeFeed(ctx context.Context, arg GetHomeFeedParams) ([]Blog, error) {
	rows, err := q.db.Query(ctx, getHomeFeed, arg.Follower, arg.CreatedAt, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Blog
	for rows.Next() {
		var i Blog
		if err := rows.Scan(
			&i.ID,
			&i.Author,
			&i.Content,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const unfollowUser = `-- name: UnfollowUser :exec
DELETE FROM follow WHERE follower = $1 and followee = $2
`

type UnfollowUserParams struct {
	Follower pgtype.UUID
	Followee pgtype.UUID
}

func (q *Queries) UnfollowUser(ctx context.Context, arg UnfollowUserParams) error {
	_, err := q.db.Exec(ctx, unfollowUser, arg.Follower, arg.Followee)
	return err
}
